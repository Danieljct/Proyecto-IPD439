/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dac.h"
#include "dma.h"
#include "fatfs.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// Estas definiciones DEBEN coincidir con tu configuración en CubeMX
#define LSM6DSL_CS_GPIO_PORT     GPIOA  // Ejemplo: Puerto A
#define LSM6DSL_CS_PIN           GPIO_PIN_15 // Ejemplo: Pin 15

// --- Constantes específicas del LSM6DSL ---
#define LSM6DSL_WHO_AM_I_REG     0x0F
#define LSM6DSL_WHO_AM_I_VAL     0x6A // Valor esperado del registro WHO_AM_I
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void Verificar_LSM6DSL(void);
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
extern SPI_HandleTypeDef hspi3;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_DAC1_Init();
  MX_SPI2_Init();
  MX_SPI3_Init();
  MX_FATFS_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  Verificar_LSM6DSL();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef LSM6DSL_SPI_ReadRegister(SPI_HandleTypeDef *hspi,
                                           GPIO_TypeDef* cs_port, uint16_t cs_pin,
                                           uint8_t reg_addr, uint8_t *p_data,
                                           uint32_t timeout)
{
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t tx_buffer[2];
    uint8_t rx_buffer[2];

    // 1. Construir el comando de lectura SPI (Bit 7 = 1 para leer)
    tx_buffer[0] = 0x80 | reg_addr;
    tx_buffer[1] = 0x00; // Byte dummy para generar el reloj para recibir

    // 2. Activar Chip Select (CS bajo)
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);

    // Pequeño retardo (opcional, a veces necesario según el hardware/velocidad)
    // HAL_Delay(1); // Descomentar si hay problemas

    // 3. Transmitir comando/dirección y recibir el dato
    //    Se envían 2 bytes, se reciben 2 bytes. El dato útil está en rx_buffer[1].
    status = HAL_SPI_TransmitReceive(hspi, tx_buffer, rx_buffer, 2, timeout);

    // Pequeño retardo (opcional)
    // HAL_Delay(1); // Descomentar si hay problemas

    // 4. Desactivar Chip Select (CS alto)
    HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);

    // 5. Comprobar estado y guardar el resultado
    if (status == HAL_OK)
    {
        *p_data = rx_buffer[1]; // El dato real está en el segundo byte recibido
    }
    else
    {
        *p_data = 0xFF; // Indicar un valor de error si falla la comunicación
    }

    return status;
}


void Verificar_LSM6DSL(void)
{
    uint8_t who_am_i_value;
    HAL_StatusTypeDef spi_status;
    uint32_t spi_comm_timeout = 1000; // 100 ms

    // Llama a la función para leer el registro WHO_AM_I
    spi_status = LSM6DSL_SPI_ReadRegister(&hspi2,
                                          LSM6DSL_CS_GPIO_PORT,
                                          LSM6DSL_CS_PIN,
                                          LSM6DSL_WHO_AM_I_REG,
                                          &who_am_i_value,
                                          spi_comm_timeout);

    if (spi_status == HAL_OK)
    {
        // Comunicación SPI exitosa, verifica el valor leído
        if (who_am_i_value == LSM6DSL_WHO_AM_I_VAL)
        {
            // ¡Correcto! El sensor respondió como se esperaba.
            printf("LSM6DSL detectado! WHO_AM_I = 0x%02X\n", who_am_i_value);
            // Aquí puedes proceder a configurar y leer otros registros
        }
        else
        {
            // Se recibió un valor inesperado
            printf("Error: Valor WHO_AM_I inesperado: 0x%02X (esperado: 0x%02X)\n",
                   who_am_i_value, LSM6DSL_WHO_AM_I_VAL);
            // Podría ser un problema de conexión, configuración SPI incorrecta, etc.
        }
    }
    else
    {
        // Error en la comunicación SPI (Timeout, Error, Ocupado)
        printf("Error en comunicación SPI al leer WHO_AM_I. Status: %d\n", spi_status);
        // Aquí podrías llamar a tu manejador de errores, Error_Handler();
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
