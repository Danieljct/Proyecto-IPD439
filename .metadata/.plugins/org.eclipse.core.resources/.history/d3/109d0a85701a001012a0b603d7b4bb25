/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lsm6dsl.h"
//#include "b_l475e_iot01a1_bus.h"
#include "stm32l4xx_nucleo_bus.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// Define max FIFO size in bytes and words
#define FIFO_MAX_BYTES  4096
#define FIFO_MAX_WORDS  (FIFO_MAX_BYTES / 2)
#define FIFO_SET_SIZE_WORDS 6 // 6 words (12 bytes) per Accel+Gyro set
#define FIFO_SET_SIZE_BYTES (FIFO_SET_SIZE_WORDS * 2)
uint8_t fifo_read_buffer[256]; // Smaller buffer for reading chunks (e.g., 256 bytes)
float cached_acc_sensitivity = 0.0f; // Cache sensitivity
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
LSM6DSL_Object_t MotionSensor;
volatile uint32_t dataRdyIntReceived;
uint32_t time, difftime;
uint8_t lsm6dsl_init_status_spi = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
static void MEMS_Init_SPI_FIFO_Slow(void); // Renombrado
static void Check_FIFO_Level_SPI(void);   // Nueva función
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  printf("---- LSM6DSL FIFO Lenta SPI Demo ----\r\n");
  MEMS_Init_SPI_FIFO_Slow(); // Llama a la nueva inicialización

  /* USER CODE END 2 */

  /* Infinite loop */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      Check_FIFO_Level_SPI(); // Llama a la función de chequeo
      HAL_Delay(500); // Revisa nivel cada 500ms para verla llenarse

                   // La FIFO se seguirá llenando a 6.66kHz en segundo plano
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

int32_t SPI_Send(void *ignored_handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
    // Tamaño total de la transmisión SPI (1 byte de dirección + Length bytes de datos)
    uint16_t transfer_size = 1 + Length;
    int32_t ret = BSP_ERROR_NONE; // 0
    // Dentro de BSP_SPI3_Send, antes de HAL_SPI_Transmit

    // Buffer local para la transmisión completa
    // Asegúrate de que sea lo suficientemente grande para la escritura más larga posible.
    // O usa asignación dinámica si prefieres y tienes heap configurado.
    uint8_t tx_buffer[transfer_size];

    // Preparar comando de escritura (MSB=0 para escribir)
    tx_buffer[0] = 0x7F & Reg; // Pone a 0 el bit 7

    // Copiar los datos a escribir después del comando/dirección
    memcpy(&tx_buffer[1], pData, Length);
   // printf("BSP_SPI3_Send: Escribiendo Reg=0x%02X, tx_buffer[0]=0x%02X\n", Reg, tx_buffer[0]);
    // Llamar a HAL para transmitir el buffer completo
    // Asumiendo que hspi3 es tu handle SPI global o accesible

    GPIOA->BSRR = GPIO_PIN_1 << 16; // Set pin to low
    if (HAL_SPI_Transmit(&hspi3, tx_buffer, transfer_size, BUS_SPI3_POLL_TIMEOUT*10) != HAL_OK)
    {

        // Error en la transmisión HAL
         printf("BSP_SPI3_Send: HAL_SPI_Transmit falló!\r\n");
         ret = BSP_ERROR_UNKNOWN_FAILURE; // O un código de error más específico
    }
    GPIOA->BSRR = GPIO_PIN_1; // Set pin to high
    // No necesitas recibir nada en una escritura pura (a menos que quieras verificar MISO)

    return ret;
}

/**
  * @brief  Receive Data from SPI BUS
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
// Asumiendo que BSP_SPI3_Recv recibe (..., uint8_t reg, uint8_t *data, uint16_t len)
int32_t SPI_Recv(void *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
    // Tamaño total de la transferencia SPI
    uint16_t transfer_size = 1 + len;

    // Buffers locales (pueden ser estáticos si len tiene un máximo conocido y pequeño)
    uint8_t tx_buffer[transfer_size];
    uint8_t rx_buffer[transfer_size];

    // Preparar comando de lectura (Ej: MSB=1 para leer)
    tx_buffer[0] = 0x80 | reg;

    // Rellenar resto de Tx con dummy bytes (0x00 o 0xFF)
    for (uint16_t i = 1; i < transfer_size; i++) {
        tx_buffer[i] = 0x00; // O 0xFF
    }

    // Llamar a HAL con buffers válidos
    // Asumiendo que hspi3 es tu handle SPI global o accesible
    time = TIM2->CNT;
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    GPIOA->BSRR = GPIO_PIN_1<< 16; // Set pin to low
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi3, tx_buffer, rx_buffer, transfer_size, HAL_MAX_DELAY); // Usa un timeout adecuado
    GPIOA->BSRR = GPIO_PIN_1 ; // Set pin to high
   //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
   difftime = TIM2->CNT - time;
    if (status == HAL_OK) {
        // Copiar los datos recibidos relevantes al buffer de destino
        memcpy(data, &rx_buffer[1], len);
        return 0; // Éxito (LSM6DSL_OK)
    } else {
        // Error en la comunicación HAL
        printf("BSP_SPI3_Recv: HAL_SPI_TransmitReceive falló con estado: %d\r\n", status);
        // Devolver un código de error. Podrías mapear HAL_ERROR, HAL_TIMEOUT etc. a errores específicos.
        if (status == HAL_TIMEOUT) {
             return -2; // Ejemplo para timeout
        } else {
             return -1; // Error genérico (LSM6DSL_ERROR)
        }
    }
}

static void MEMS_Init_SPI_FIFO_Slow(void)
{
    LSM6DSL_IO_t io_ctx;
    uint8_t id;
    int32_t status;

    printf("Configurando interfaz I/O SPI para LSM6DSL...\r\n");
    io_ctx.Init = BSP_SPI3_Init;
    io_ctx.DeInit = BSP_SPI3_DeInit;
    io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
    io_ctx.Address = 0;
    io_ctx.WriteReg = SPI_Send;
    io_ctx.ReadReg = SPI_Recv;
    io_ctx.GetTick = BSP_GetTick;

    status = LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
    if (status != LSM6DSL_OK) { printf("Error: RegisterBusIO (%ld)\r\n", status); Error_Handler(); return; }

    printf("Leyendo WHO_AM_I via SPI...\r\n");
    status = LSM6DSL_ReadID(&MotionSensor, &id);
    if (status != LSM6DSL_OK) { printf("Error: ReadID (%ld)\r\n", status); Error_Handler(); return; }

    printf("WHO_AM_I = 0x%02X\r\n", id);
    if (id != LSM6DSL_ID) { printf("Error: ID incorrecto (0x%02X)\n", LSM6DSL_ID); Error_Handler(); return; }

    printf("LSM6DSL detectado! Inicializando...\r\n");
    status = LSM6DSL_Init(&MotionSensor); // Pone BDU=1, AutoInc=1, FIFO=Bypass
    if (status != LSM6DSL_OK) { printf("Error: Init (%ld)\r\n", status); Error_Handler(); return; }

    // --- Configurar Sensores ---
    printf("Configurando Accel a 12.5 Hz, Gyro OFF...\r\n");
    status = LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 12.5f); // <-- ODR Lento
    if (status != LSM6DSL_OK) { printf("Error ACC Set ODR (%ld)\r\n", status); Error_Handler(); return; }
    status = LSM6DSL_ACC_SetFullScale(&MotionSensor, 4); // +/- 4g
    if (status != LSM6DSL_OK) { printf("Error ACC Set FS (%ld)\r\n", status); Error_Handler(); return; }

    // Asegurarse que el Gyro está apagado (ODR_OFF)
    status = lsm6dsl_gy_data_rate_set(&(MotionSensor.Ctx), LSM6DSL_GY_ODR_OFF);
    if (status != LSM6DSL_OK) { printf("Error GYRO OFF (%ld)\r\n", status); Error_Handler(); return; }
    MotionSensor.gyro_is_enabled = 0; // Marcar como deshabilitado en el objeto

    // --- Configurar FIFO ---
    printf("Configurando FIFO via SPI (12.5Hz, Accel Only, FIFO Mode)...\r\n");
    status = LSM6DSL_FIFO_Set_ODR_Value(&MotionSensor, 12.5f); // <-- FIFO ODR Lento
    if (status != LSM6DSL_OK) { printf("Error FIFO Set ODR (%ld)\r\n", status); Error_Handler(); return; }

    status = LSM6DSL_FIFO_ACC_Set_Decimation(&MotionSensor, LSM6DSL_FIFO_XL_NO_DEC); // Accel en FIFO
    if (status != LSM6DSL_OK) { printf("Error FIFO ACC Decim (%ld)\r\n", status); Error_Handler(); return; }
    status = LSM6DSL_FIFO_GYRO_Set_Decimation(&MotionSensor, LSM6DSL_FIFO_GY_DISABLE); // Gyro NO en FIFO
    if (status != LSM6DSL_OK) { printf("Error FIFO GYRO Decim (%ld)\r\n", status); Error_Handler(); return; }

    // IMPORTANTE: Establecer modo FIFO (NO Stream/Continuo)
    status = LSM6DSL_FIFO_Set_Mode(&MotionSensor, LSM6DSL_FIFO_MODE); // <- FIFO MODE (001)
    if (status != LSM6DSL_OK) { printf("Error FIFO Set Mode (%ld)\r\n", status); Error_Handler(); return; }

    // Asegurarse que STOP_ON_FTH está desactivado (aunque FTH=0, por si acaso)
    // El bit está en FIFO_CTRL4 (0x09), Bit 7. Default es 0.
    // lsm6dsl_fifo_stop_on_wtm_set(&(MotionSensor.Ctx), 0); // Ya es default

    printf("Activando Acelerómetro...\r\n");
    status = LSM6DSL_ACC_Enable(&MotionSensor);
    if (status != LSM6DSL_OK) { printf("Error ACC Enable (%ld)\r\n", status); Error_Handler(); return; }

    printf("LSM6DSL FIFO SPI configurada en MODO FIFO a 12.5 Hz (Solo Accel).\r\n");
    lsm6dsl_init_status_spi = 1;
}

/**
  * @brief Verifica y muestra el nivel de llenado de la FIFO.
  */
static void Check_FIFO_Level_SPI(void)
{
    if (!lsm6dsl_init_status_spi) { return; }

    uint16_t num_samples_in_fifo = 0; // Número de palabras (16-bit)
    int32_t status;
    uint8_t fifo_status_reg2;
    uint8_t is_fifo_full = 0;

    // Leer STATUS2 para checkear flags y obtener parte alta del nivel
    status = lsm6dsl_read_reg(&(MotionSensor.Ctx), LSM6DSL_FIFO_STATUS2, &fifo_status_reg2, 1);
    if (status != LSM6DSL_OK) { printf("Error L2663 (%ld)\r\n", status); return; } // Leer STATUS2

    // Obtener nivel completo
    status = LSM6DSL_FIFO_Get_Num_Samples(&MotionSensor, &num_samples_in_fifo);
    if (status != LSM6DSL_OK) { printf("Error L2667 (%ld)\r\n", status); return; } // Leer nivel FIFO

    // Checkear flag FIFO_FULL_SMART (Bit 5 de STATUS2)
    is_fifo_full = (fifo_status_reg2 & 0x20) >> 5;

    // Calcular sets (3 palabras/set para Accel only)
    uint16_t words_per_set = 3;
    uint16_t num_sets = num_samples_in_fifo / words_per_set;
    // Capacidad máxima en sets: 2048 words / 3 words/set = 682 sets
    const uint16_t max_sets = 2048 / words_per_set;

    printf("FIFO Nivel: %u / %u palabras (%u / %u sets) - Full Flag: %u\r\n",
           num_samples_in_fifo, (uint16_t)2048, num_sets, max_sets, is_fifo_full);

    // Opcional: Si se llena, podrías resetearla para verla llenarse de nuevo
    // if (is_fifo_full) {
    //    printf("FIFO llena detectada. Reseteando...\r\n");
    //    lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_BYPASS_MODE);
    //    HAL_Delay(5);
    //    lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_FIFO_MODE);
    // }
}

/* USER CODE END 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_0) {
    dataRdyIntReceived++;
  }
}

int _write(int fd, char * ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
  return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    printf("no se conectó");
    HAL_Delay(50); /* wait 50 ms */
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
