/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lsm6dsl.h"
//#include "b_l475e_iot01a1_bus.h"
#include "stm32l4xx_nucleo_bus.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
LSM6DSL_Object_t MotionSensor;
volatile uint32_t dataRdyIntReceived;
uint32_t time, difftime;
uint8_t lsm6dsl_init_status_spi = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
static void MEMS_Init_SPI_FIFO(void);
static void Read_LSM6DSL_FIFO_SPI(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  printf("\r\n---- LSM6DSL FIFO SPI Demo ----\r\n");
  HAL_TIM_Base_Start(&htim2); // Si usas TIM2 para medir tiempo
  HAL_Delay(100);

  MEMS_Init_SPI_FIFO(); // Llama a la inicialización SPI+FIFO

  /* USER CODE END 2 */

  /* Infinite loop */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Read_LSM6DSL_FIFO_SPI(); // Llama a la función de lectura de FIFO
    HAL_Delay(5000); // Ajusta este delay según necesites (50ms = 20Hz loop)
                   // La FIFO se seguirá llenando a 6.66kHz en segundo plano
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

int32_t SPI_Send(void *ignored_handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
    // Tamaño total de la transmisión SPI (1 byte de dirección + Length bytes de datos)
    uint16_t transfer_size = 1 + Length;
    int32_t ret = BSP_ERROR_NONE; // 0
    // Dentro de BSP_SPI3_Send, antes de HAL_SPI_Transmit

    // Buffer local para la transmisión completa
    // Asegúrate de que sea lo suficientemente grande para la escritura más larga posible.
    // O usa asignación dinámica si prefieres y tienes heap configurado.
    uint8_t tx_buffer[transfer_size];

    // Preparar comando de escritura (MSB=0 para escribir)
    tx_buffer[0] = 0x7F & Reg; // Pone a 0 el bit 7

    // Copiar los datos a escribir después del comando/dirección
    memcpy(&tx_buffer[1], pData, Length);
    printf("BSP_SPI3_Send: Escribiendo Reg=0x%02X, tx_buffer[0]=0x%02X\n", Reg, tx_buffer[0]);
    // Llamar a HAL para transmitir el buffer completo
    // Asumiendo que hspi3 es tu handle SPI global o accesible

    GPIOA->BSRR = GPIO_PIN_1 << 16; // Set pin to low
    if (HAL_SPI_Transmit(&hspi3, tx_buffer, transfer_size, BUS_SPI3_POLL_TIMEOUT*10) != HAL_OK)
    {

        // Error en la transmisión HAL
         printf("BSP_SPI3_Send: HAL_SPI_Transmit falló!\r\n");
         ret = BSP_ERROR_UNKNOWN_FAILURE; // O un código de error más específico
    }
    GPIOA->BSRR = GPIO_PIN_1; // Set pin to high
    // No necesitas recibir nada en una escritura pura (a menos que quieras verificar MISO)

    return ret;
}

/**
  * @brief  Receive Data from SPI BUS
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
// Asumiendo que BSP_SPI3_Recv recibe (..., uint8_t reg, uint8_t *data, uint16_t len)
int32_t SPI_Recv(void *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
    // Tamaño total de la transferencia SPI
    uint16_t transfer_size = 1 + len;

    // Buffers locales (pueden ser estáticos si len tiene un máximo conocido y pequeño)
    uint8_t tx_buffer[transfer_size];
    uint8_t rx_buffer[transfer_size];

    // Preparar comando de lectura (Ej: MSB=1 para leer)
    tx_buffer[0] = 0x80 | reg;

    // Rellenar resto de Tx con dummy bytes (0x00 o 0xFF)
    for (uint16_t i = 1; i < transfer_size; i++) {
        tx_buffer[i] = 0x00; // O 0xFF
    }

    // Llamar a HAL con buffers válidos
    // Asumiendo que hspi3 es tu handle SPI global o accesible
    time = TIM2->CNT;
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    GPIOA->BSRR = GPIO_PIN_1<< 16; // Set pin to low
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi3, tx_buffer, rx_buffer, transfer_size, HAL_MAX_DELAY); // Usa un timeout adecuado
    GPIOA->BSRR = GPIO_PIN_1 ; // Set pin to high
   //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
   difftime = TIM2->CNT - time;
    if (status == HAL_OK) {
        // Copiar los datos recibidos relevantes al buffer de destino
        memcpy(data, &rx_buffer[1], len);
        return 0; // Éxito (LSM6DSL_OK)
    } else {
        // Error en la comunicación HAL
        printf("BSP_SPI3_Recv: HAL_SPI_TransmitReceive falló con estado: %d\r\n", status);
        // Devolver un código de error. Podrías mapear HAL_ERROR, HAL_TIMEOUT etc. a errores específicos.
        if (status == HAL_TIMEOUT) {
             return -2; // Ejemplo para timeout
        } else {
             return -1; // Error genérico (LSM6DSL_ERROR)
        }
    }
}


static void MEMS_Init_SPI_FIFO(void)
{
    LSM6DSL_IO_t io_ctx;
    uint8_t id;
    int32_t status; // Usar int32_t para los retornos del driver

    printf("Configurando interfaz I/O SPI para LSM6DSL...\n");

    /* Configura la estructura IO con las funciones BSP/Plataforma */
    io_ctx.Init = BSP_SPI3_Init;
    io_ctx.DeInit = BSP_SPI3_DeInit;
    io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;             // Indica SPI 4 hilos
    io_ctx.Address = 0;                                  // Irrelevante para SPI
    io_ctx.WriteReg = SPI_Send; // <- Tu función de escritura SPI que funciona
    io_ctx.ReadReg = SPI_Recv;   // <- Tu función de lectura SPI que funciona
    io_ctx.GetTick = BSP_GetTick;

    /* Registra las funciones I/O con el driver */
    status = LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
    if (status != LSM6DSL_OK) {
        printf("Error: LSM6DSL_RegisterBusIO falló (%ld)\n", status);
        Error_Handler(); return;
    }

    printf("Leyendo WHO_AM_I via SPI...\n");
    /* Lee el ID para verificar la comunicación */
    status = LSM6DSL_ReadID(&MotionSensor, &id); // Usa SPI_Recv internamente
    if (status != LSM6DSL_OK) {
        printf("Error: LSM6DSL_ReadID falló (%ld)\n", status);
        Error_Handler(); return;
    }

    printf("WHO_AM_I = 0x%02X\n", id);
    if (id != LSM6DSL_ID) { // LSM6DSL_ID debería ser 0x6A
        printf("Error: ID incorrecto (esperado 0x%02X)\n", LSM6DSL_ID);
        Error_Handler(); return;
    }

    printf("LSM6DSL detectado! Inicializando...\n");
    /* Inicializa el sensor con valores por defecto y BDU */
    status = LSM6DSL_Init(&MotionSensor); // Usa SPI_Send/Recv internamente
    if (status != LSM6DSL_OK) {
        printf("Error: LSM6DSL_Init falló (%ld)\n", status);
        Error_Handler(); return;
    }

    printf("Configurando Accel y Gyro a 6.66 kHz via SPI...\n");
    /* Configura Acelerómetro a máxima frecuencia */
    status = LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 416.0f); // 6.66 kHz
    if (status != LSM6DSL_OK) { printf("Error ACC Set ODR (%ld)\n", status); Error_Handler(); return; }
    status = LSM6DSL_ACC_SetFullScale(&MotionSensor, 4); // +/- 4g (Ajusta si necesitas)
    if (status != LSM6DSL_OK) { printf("Error ACC Set FS (%ld)\n", status); Error_Handler(); return; }

    /* Configura Giroscopio a máxima frecuencia */
    status = LSM6DSL_GYRO_SetOutputDataRate(&MotionSensor, 416.0f); // 6.66 kHz
    if (status != LSM6DSL_OK) { printf("Error GYRO Set ODR (%ld)\n", status); Error_Handler(); return; }
    status = LSM6DSL_GYRO_SetFullScale(&MotionSensor, 2000); // +/- 2000 dps (Ajusta si necesitas)
    if (status != LSM6DSL_OK) { printf("Error GYRO Set FS (%ld)\n", status); Error_Handler(); return; }

    printf("Configurando FIFO via SPI...\n");
    /* Configura FIFO */
    status = LSM6DSL_FIFO_Set_ODR_Value(&MotionSensor, 416.0f); // FIFO ODR = 6.66kHz
    if (status != LSM6DSL_OK) { printf("Error FIFO Set ODR (%ld)\n", status); Error_Handler(); return; }
    status = LSM6DSL_FIFO_ACC_Set_Decimation(&MotionSensor, LSM6DSL_FIFO_XL_NO_DEC); // Accel en FIFO sin decimar
    if (status != LSM6DSL_OK) { printf("Error FIFO ACC Decimation (%ld)\n", status); Error_Handler(); return; }
    status = LSM6DSL_FIFO_GYRO_Set_Decimation(&MotionSensor, LSM6DSL_FIFO_GY_NO_DEC); // Gyro en FIFO sin decimar
    if (status != LSM6DSL_OK) { printf("Error FIFO GYRO Decimation (%ld)\n", status); Error_Handler(); return; }
    status = LSM6DSL_FIFO_Set_Mode(&MotionSensor, LSM6DSL_STREAM_MODE); // Modo Continuo (Stream)
    if (status != LSM6DSL_OK) { printf("Error FIFO Set Mode (%ld)\n", status); Error_Handler(); return; }

    printf("Activando sensores via SPI...\n");
    /* Activa los sensores */
    status = LSM6DSL_ACC_Enable(&MotionSensor);
    if (status != LSM6DSL_OK) { printf("Error ACC Enable (%ld)\n", status); Error_Handler(); return; }
    status = LSM6DSL_GYRO_Enable(&MotionSensor);
    if (status != LSM6DSL_OK) { printf("Error GYRO Enable (%ld)\n", status); Error_Handler(); return; }

    printf("LSM6DSL FIFO SPI configurada en modo Continuo a 6.66 kHz.\n");
    lsm6dsl_init_status_spi = 1; // Marcar como inicializado correctamente
}

static void Read_LSM6DSL_FIFO_SPI(void)
{
    if (!lsm6dsl_init_status_spi) {
        return; // No intentar leer si la inicialización falló
    }

    uint16_t num_samples_in_fifo = 0;
    uint16_t i;
    int32_t status;
    uint8_t fifo_status_regs[4]; // Para STATUS1, STATUS2, STATUS3, STATUS4

    // Leer los 4 registros de estado de la FIFO (0x3A a 0x3D)
    status = lsm6dsl_read_reg(&(MotionSensor.Ctx), LSM6DSL_FIFO_STATUS1, fifo_status_regs, 4);
    if (status != LSM6DSL_OK) {
        printf("Error leyendo estado FIFO (%ld)\n", status);
        return;
    }

    // Interpretar STATUS2 (Registro 0x3B, índice 1 en nuestro buffer)
    uint8_t overrun = (fifo_status_regs[1] & 0x40) >> 6;
    uint8_t fifo_full = (fifo_status_regs[1] & 0x20) >> 5;
    uint8_t fifo_empty = (fifo_status_regs[1] & 0x10) >> 4;
    uint8_t watermark = (fifo_status_regs[1] & 0x80) >> 7;
    num_samples_in_fifo = (uint16_t)(fifo_status_regs[1] & 0x07) << 8 | fifo_status_regs[0]; // Unir DIFF_FIFO[10:0]

    // Imprimir estado y número de muestras
    // printf("FIFO Status: S1=0x%02X S2=0x%02X S3=0x%02X S4=0x%02X | Samples=%u | OV=%u EMP=%u FULL=%u WTM=%u\n",
    //       fifo_status_regs[0], fifo_status_regs[1], fifo_status_regs[2], fifo_status_regs[3],
    //       num_samples_in_fifo, overrun, fifo_empty, fifo_full, watermark);

    // Si hubo overrun, quizás necesitemos resetear la FIFO
    if (overrun) {
        printf("¡¡FIFO OVERRUN DETECTADO!! Reseteando FIFO...\n");
        lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_BYPASS_MODE); // Poner en Bypass para resetear
        HAL_Delay(1); // Pequeña pausa
        lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_STREAM_MODE); // Volver a Stream
        return; // Salir de esta lectura, intentar en la próxima iteración
    }

    uint16_t num_complete_sets = num_samples_in_fifo / 6;
    uint16_t num_words_to_read = num_complete_sets * 6;

    if (num_words_to_read > 0) {
       // printf("Leyendo %u sets (%u palabras) de FIFO SPI...\n", num_complete_sets, num_words_to_read); // Reducir prints

        for (i = 0; i < num_complete_sets; i++) {
            uint8_t fifo_data_buffer[12];
            LSM6DSL_AxesRaw_t gyro_raw;
            LSM6DSL_AxesRaw_t acc_raw;
            LSM6DSL_Axes_t gyro_mdps;
            LSM6DSL_Axes_t acc_mg;

            // Leer 12 bytes (6 palabras)
            status = lsm6dsl_read_reg(&(MotionSensor.Ctx), LSM6DSL_FIFO_DATA_OUT_L, fifo_data_buffer, 12);

            if (status != LSM6DSL_OK) {
                printf("Error leyendo datos FIFO SPI (%ld)\n", status);
                // Quitado el reset de FIFO aquí para ver si el overrun lo maneja
                break; // Salir del bucle for
            }

            // Imprimir bytes crudos para depurar datos del Giroscopio
            if (i == 0) { // Solo el primer set
                 printf("  Raw bytes: G[%02X %02X %02X %02X %02X %02X] A[%02X %02X %02X %02X %02X %02X]\n",
                        fifo_data_buffer[0], fifo_data_buffer[1], fifo_data_buffer[2], fifo_data_buffer[3], fifo_data_buffer[4], fifo_data_buffer[5],
                        fifo_data_buffer[6], fifo_data_buffer[7], fifo_data_buffer[8], fifo_data_buffer[9], fifo_data_buffer[10], fifo_data_buffer[11]);
            }

            // Desempaquetar datos
            gyro_raw.x = (int16_t)(((uint16_t)fifo_data_buffer[1] << 8) | fifo_data_buffer[0]);
            gyro_raw.y = (int16_t)(((uint16_t)fifo_data_buffer[3] << 8) | fifo_data_buffer[2]);
            gyro_raw.z = (int16_t)(((uint16_t)fifo_data_buffer[5] << 8) | fifo_data_buffer[4]);
            acc_raw.x  = (int16_t)(((uint16_t)fifo_data_buffer[7] << 8) | fifo_data_buffer[6]);
            acc_raw.y  = (int16_t)(((uint16_t)fifo_data_buffer[9] << 8) | fifo_data_buffer[8]);
            acc_raw.z  = (int16_t)(((uint16_t)fifo_data_buffer[11] << 8) | fifo_data_buffer[10]);

            // Convertir a unidades físicas
            float sensitivity_acc = 0.0f;
            float sensitivity_gyro = 0.0f;
            // Es más eficiente obtener la sensibilidad una vez fuera del bucle si no cambia
            LSM6DSL_ACC_GetSensitivity(&MotionSensor, &sensitivity_acc);
            LSM6DSL_GYRO_GetSensitivity(&MotionSensor, &sensitivity_gyro);

            acc_mg.x = (int32_t)((float)acc_raw.x * sensitivity_acc);
            acc_mg.y = (int32_t)((float)acc_raw.y * sensitivity_acc);
            acc_mg.z = (int32_t)((float)acc_raw.z * sensitivity_acc);
            gyro_mdps.x = (int32_t)((float)gyro_raw.x * sensitivity_gyro);
            gyro_mdps.y = (int32_t)((float)gyro_raw.y * sensitivity_gyro);
            gyro_mdps.z = (int32_t)((float)gyro_raw.z * sensitivity_gyro);

            // Imprimir datos procesados (solo el primer set para reducir spam)
             if (i == 0 && num_complete_sets > 0) {
                printf("SPI FIFO Set[0]: A:[%ld %ld %ld] G:[%ld %ld %ld] (%u sets)\r\n",
                       acc_mg.x, acc_mg.y, acc_mg.z,
                       gyro_mdps.x, gyro_mdps.y, gyro_mdps.z,
                       num_complete_sets);
             }
        }
         // Considerar vaciar muestras restantes si num_samples_in_fifo % 6 != 0
         uint16_t remaining_words = num_samples_in_fifo % 6;
         if (remaining_words > 0) {
             printf("Vaciando %d palabras restantes de la FIFO...\n", remaining_words);
             uint8_t dummy_buf[2];
             for(i=0; i < remaining_words; i++) {
                  lsm6dsl_read_reg(&(MotionSensor.Ctx), LSM6DSL_FIFO_DATA_OUT_L, dummy_buf, 2);
             }
         }

    } else {
       //printf("."); // Imprime algo para saber que el bucle corre sin datos
    }
}


/* USER CODE END 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_0) {
    dataRdyIntReceived++;
  }
}

int _write(int fd, char * ptr, int len)
{
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
  return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    printf("no se conectó");
    HAL_Delay(50); /* wait 50 ms */
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
