/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

#include "lsm6dsl.h"
//#include "b_l475e_iot01a1_bus.h"
#include "stm32l4xx_nucleo_bus.h"
#include <stdio.h>
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lsm6dsl.h"
#include <stdio.h>
#include <string.h>

// --- Constantes ---
#define FIFO_MAX_BYTES      4096
#define FIFO_MAX_WORDS      (FIFO_MAX_BYTES / 2)
#define ACCEL_WORDS_PER_SET 3 // Ax, Ay, Az
#define ACCEL_BYTES_PER_SET (ACCEL_WORDS_PER_SET * 2)
#define FIFO_MAX_SETS       (FIFO_MAX_WORDS / ACCEL_WORDS_PER_SET) // ~682

// --- Configuración Watermark ---
#define FIFO_WATERMARK_WORDS 2040 // Umbral cercano al máximo (Max FTH es 2047)
#if (FIFO_WATERMARK_WORDS > 2047)
#error FIFO_WATERMARK_WORDS cannot exceed 2047
#endif
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// --- Definiciones para SPI ---
#define LSM6DSL_CS_GPIO_PORT     GPIOA
#define LSM6DSL_CS_PIN           GPIO_PIN_1 // ¡Asegúrate que es el pin correcto!
// --- Pin de Interrupción (Conectado a INT1 del LSM6DSL) ---
#define LSM6DSL_INT1_GPIO_PORT   GPIOA      // ¡CAMBIA al puerto correcto!
#define LSM6DSL_INT1_PIN         GPIO_PIN_0 // ¡CAMBIA al pin correcto (ej. PA0 para EXTI0)!
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
// Prototipos
static void MEMS_Init_SPI_FIFO_Int(void); // Renombrado
static void Read_FIFO_On_Interrupt_SPI(void); // Nueva función de lectura
int32_t SPI_Send(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length);
int32_t SPI_Recv(void *handle, uint8_t reg, uint8_t *data, uint16_t len);

/* USER CODE END PD */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi3;
TIM_HandleTypeDef htim2;
UART_HandleTypeDef huart2;
/* USER CODE BEGIN PV */
LSM6DSL_Object_t MotionSensor;
uint8_t lsm6dsl_init_status_spi = 0;
float cached_acc_sensitivity = 0.0f;
// Buffer GRANDE para leer toda la FIFO
uint8_t fifo_data_buffer[FIFO_MAX_BYTES]; // Renombrado y único buffer necesario
volatile uint8_t fifo_int_triggered = 0; // Flag para la interrupción
// Variables de tiempo globales
uint32_t time, difftime;
/* USER CODE END PV */

// ... SystemClock_Config, MX_..._Init ...

/* USER CODE BEGIN 4 */

// --- Tus funciones SPI_Send y SPI_Recv (Las que funcionan) ---
int32_t SPI_Send(void *ignored_handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
    // Tamaño total de la transmisión SPI (1 byte de dirección + Length bytes de datos)
    uint16_t transfer_size = 1 + Length;
    int32_t ret = BSP_ERROR_NONE; // 0
    // Dentro de BSP_SPI3_Send, antes de HAL_SPI_Transmit

    // Buffer local para la transmisión completa
    // Asegúrate de que sea lo suficientemente grande para la escritura más larga posible.
    // O usa asignación dinámica si prefieres y tienes heap configurado.
    uint8_t tx_buffer[transfer_size];

    // Preparar comando de escritura (MSB=0 para escribir)
    tx_buffer[0] = 0x7F & Reg; // Pone a 0 el bit 7

    // Copiar los datos a escribir después del comando/dirección
    memcpy(&tx_buffer[1], pData, Length);
   // printf("BSP_SPI3_Send: Escribiendo Reg=0x%02X, tx_buffer[0]=0x%02X\n", Reg, tx_buffer[0]);
    // Llamar a HAL para transmitir el buffer completo
    // Asumiendo que hspi3 es tu handle SPI global o accesible

    GPIOA->BSRR = GPIO_PIN_1 << 16; // Set pin to low
    if (HAL_SPI_Transmit(&hspi3, tx_buffer, transfer_size, BUS_SPI3_POLL_TIMEOUT*10) != HAL_OK)
    {

        // Error en la transmisión HAL
         printf("BSP_SPI3_Send: HAL_SPI_Transmit falló!\r\n");
         ret = BSP_ERROR_UNKNOWN_FAILURE; // O un código de error más específico
    }
    GPIOA->BSRR = GPIO_PIN_1; // Set pin to high
    // No necesitas recibir nada en una escritura pura (a menos que quieras verificar MISO)

    return ret;
}

/**
  * @brief  Receive Data from SPI BUS
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
// Asumiendo que BSP_SPI3_Recv recibe (..., uint8_t reg, uint8_t *data, uint16_t len)
int32_t SPI_Recv(void *handle, uint8_t reg, uint8_t *data, uint16_t len)
{
    // Tamaño total de la transferencia SPI
    uint16_t transfer_size = 1 + len;

    // Buffers locales (pueden ser estáticos si len tiene un máximo conocido y pequeño)
    uint8_t tx_buffer[transfer_size];
    uint8_t rx_buffer[transfer_size];

    // Preparar comando de lectura (Ej: MSB=1 para leer)
    tx_buffer[0] = 0x80 | reg;

    // Rellenar resto de Tx con dummy bytes (0x00 o 0xFF)
    for (uint16_t i = 1; i < transfer_size; i++) {
        tx_buffer[i] = 0x00; // O 0xFF
    }

    // Llamar a HAL con buffers válidos
    // Asumiendo que hspi3 es tu handle SPI global o accesible
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
    GPIOA->BSRR = GPIO_PIN_1<< 16; // Set pin to low
    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi3, tx_buffer, rx_buffer, transfer_size, HAL_MAX_DELAY); // Usa un timeout adecuado
    GPIOA->BSRR = GPIO_PIN_1 ; // Set pin to high
   //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
    if (status == HAL_OK) {
        // Copiar los datos recibidos relevantes al buffer de destino
        memcpy(data, &rx_buffer[1], len);
        return 0; // Éxito (LSM6DSL_OK)
    } else {
        // Error en la comunicación HAL
        printf("BSP_SPI3_Recv: HAL_SPI_TransmitReceive falló con estado: %d\r\n", status);
        // Devolver un código de error. Podrías mapear HAL_ERROR, HAL_TIMEOUT etc. a errores específicos.
        if (status == HAL_TIMEOUT) {
             return -2; // Ejemplo para timeout
        } else {
             return -1; // Error genérico (LSM6DSL_ERROR)
        }
    }
}

/**
  * @brief Inicializa LSM6DSL vía SPI para FIFO con Interrupción por Watermark.
  */
static void MEMS_Init_SPI_FIFO_Int(void)
{
    LSM6DSL_IO_t io_ctx;
    uint8_t id;
    int32_t status;
    lsm6dsl_int1_route_t int1_route; // Para configurar INT1
    float sens_a;

    printf("Configurando interfaz I/O SPI...\r\n");
    // Config io_ctx (SPI_4WIRES, SPI_Send/Recv, etc.)
    io_ctx.Init = BSP_SPI3_Init;
    io_ctx.DeInit = BSP_SPI3_DeInit;
    io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
    io_ctx.Address = 0;
    io_ctx.WriteReg = SPI_Send;
    io_ctx.ReadReg = SPI_Recv;
    io_ctx.GetTick = BSP_GetTick;

    status = LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
    if (status != LSM6DSL_OK) { printf("E:RegBusIO(%ld)\r\n", status); Error_Handler(); return; }

    printf("Leyendo WHO_AM_I...\r\n");
    status = LSM6DSL_ReadID(&MotionSensor, &id);
    if (status != LSM6DSL_OK) { printf("E:ReadID(%ld)\r\n", status); Error_Handler(); return; }
    printf("WHO_AM_I = 0x%02X\r\n", id);
    if (id != LSM6DSL_ID) { printf("E:WrongID\r\n"); Error_Handler(); return; }

    printf("LSM6DSL detectado! Inicializando...\r\n");
    status = LSM6DSL_Init(&MotionSensor);
    if (status != LSM6DSL_OK) { printf("E:Init(%ld)\r\n", status); Error_Handler(); return; }

    // --- Configurar Sensores ---
    printf("Configurando Accel a 6.66 kHz, Gyro OFF...\r\n");
    status = LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 6660.0f);
    if (status != LSM6DSL_OK) { printf("E:AccODR(%ld)\r\n", status); Error_Handler(); return; }
    status = LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);
    if (status != LSM6DSL_OK) { printf("E:AccFS(%ld)\r\n", status); Error_Handler(); return; }
    status = LSM6DSL_GYRO_Disable(&MotionSensor);
    if (status != LSM6DSL_OK) { printf("E:GyroDis(%ld)\r\n", status); Error_Handler(); return; }
    if (LSM6DSL_ACC_GetSensitivity(&MotionSensor, &cached_acc_sensitivity) != LSM6DSL_OK) {
         printf("E:GetSens\r\n"); Error_Handler(); return;
    }
    printf("Sensibilidad Accel: %.3f mg/LSB\r\n", cached_acc_sensitivity);

    // --- Configurar FIFO ---
    printf("Configurando FIFO (6.66kHz, Accel Only, Stream Mode, WTM=%d, StopOnWTM=0)...\r\n", FIFO_WATERMARK_WORDS);
    status = LSM6DSL_FIFO_Set_ODR_Value(&MotionSensor, 6660.0f);
    if (status != LSM6DSL_OK) { printf("E:FifoODR(%ld)\r\n", status); Error_Handler(); return; }
    status = LSM6DSL_FIFO_ACC_Set_Decimation(&MotionSensor, LSM6DSL_FIFO_XL_NO_DEC);
    if (status != LSM6DSL_OK) { printf("E:FifoAccDec(%ld)\r\n", status); Error_Handler(); return; }
    status = LSM6DSL_FIFO_GYRO_Set_Decimation(&MotionSensor, LSM6DSL_FIFO_GY_DISABLE);
    if (status != LSM6DSL_OK) { printf("E:FifoGyroDec(%ld)\r\n", status); Error_Handler(); return; }

    // Configurar Nivel de Watermark
    status = LSM6DSL_FIFO_Set_Watermark_Level(&MotionSensor, FIFO_WATERMARK_WORDS);
    if (status != LSM6DSL_OK) { printf("E:SetWTM(%ld)\r\n", status); Error_Handler(); return; }

    // Asegurarse que "Stop on Watermark" está DESACTIVADO (para modo Stream real)
    status = lsm6dsl_fifo_stop_on_wtm_set(&(MotionSensor.Ctx), 0); // 0 = Disabled
     if (status != LSM6DSL_OK) { printf("E:StopOnWTM(%ld)\r\n", status); Error_Handler(); return; }

    // --- Configurar Interrupción INT1 para Watermark ---
    // Asegúrate que el pin EXTI (LSM6DSL_INT1_PIN) está configurado en CubeMX
    printf("Configurando INT1 para FIFO Watermark...\r\n");
    status = lsm6dsl_pin_int1_route_get(&(MotionSensor.Ctx), &int1_route);
     if (status != LSM6DSL_OK) { printf("E:GetInt1Route(%ld)\r\n", status); Error_Handler(); return; }
    // Habilitar SOLO la interrupción de watermark en INT1
    int1_route.int1_fth = 1;
    int1_route.int1_fifo_ovr = 0; // Deshabilitar OVF en INT1 (lo chequeamos por status)
    int1_route.int1_full_flag = 0;
    int1_route.int1_drdy_xl = 0; // Deshabilitar DRDY si no se usa
    //... deshabilita otras fuentes si es necesario ...
    status = lsm6dsl_pin_int1_route_set(&(MotionSensor.Ctx), int1_route);
    if (status != LSM6DSL_OK) { printf("E:SetInt1Route(%ld)\r\n", status); Error_Handler(); return; }
    // Puedes configurar Latch/Pulse, Active High/Low aquí si es necesario
    // lsm6dsl_int_notification_set(...)
    // lsm6dsl_pin_polarity_set(...)

    // --- Iniciar operación ---
    // Poner en modo Stream (esto también debería limpiar la FIFO)
    status = LSM6DSL_FIFO_Set_Mode(&MotionSensor, LSM6DSL_STREAM_MODE);
    if (status != LSM6DSL_OK) { printf("E:FifoSetMode(%ld)\r\n", status); Error_Handler(); return; }

    printf("Activando Acelerómetro...\r\n");
    status = LSM6DSL_ACC_Enable(&MotionSensor);
    if (status != LSM6DSL_OK) { printf("E:AccEnable(%ld)\r\n", status); Error_Handler(); return; }

    printf("LSM6DSL configurado para Int. Watermark (%d words) a 6.66kHz (Solo Accel, Stream Mode).\r\n", FIFO_WATERMARK_WORDS);
    printf("Esperando interrupciones en pin %d...\n", LSM6DSL_INT1_PIN);
    lsm6dsl_init_status_spi = 1;
    fifo_int_triggered = 0; // Asegurar flag limpio
}


/**
  * @brief Lee la FIFO completa cuando se activa por interrupción y mide el tiempo.
  */
static void Read_Full_FIFO_And_Measure_Time_SPI(void)
{
    if (!lsm6dsl_init_status_spi || cached_acc_sensitivity == 0.0f) { return; }

    uint16_t num_words_available = 0;
    uint16_t bytes_to_read = 0;
    int32_t status;
    uint8_t fifo_status_reg2;
    uint32_t start_time, read_duration_ticks;
    uint32_t read_duration_us;

    // --- Leer nivel y estado ---
    // Es buena idea leer el nivel exacto aunque la WTM haya saltado
    status = LSM6DSL_FIFO_Get_Num_Samples(&MotionSensor, &num_words_available);
    if (status != LSM6DSL_OK) { printf("E:GetIntSamples(%ld)\r\n", status); return; }

    // Leer STATUS2 para checkear overrun por si acaso
     status = lsm6dsl_read_reg(&(MotionSensor.Ctx), LSM6DSL_FIFO_STATUS2, &fifo_status_reg2, 1);
     if (status == LSM6DSL_OK && (fifo_status_reg2 & 0x40)) {
        printf("OVF! detectado justo antes de leer!\r\n");
        // Resetear FIFO y salir
        lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_BYPASS_MODE); HAL_Delay(1);
        lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_STREAM_MODE);
        return;
     }

    // --- Proceder a leer ---
    bytes_to_read = num_words_available * 2;
    if (bytes_to_read == 0) {
        printf("WARN: Interrupción pero 0 muestras?\r\n");
        // Podríamos necesitar resetear la FIFO aquí también si la interrupción no se borra
        return;
    }
    if (bytes_to_read > FIFO_MAX_BYTES) {
        printf("WARN: Nivel FIFO (%u) > Buffer (%d)! Leyendo max.\r\n", bytes_to_read, FIFO_MAX_BYTES);
        bytes_to_read = FIFO_MAX_BYTES;
        num_words_available = bytes_to_read / 2; // Ajustar palabras
    }

    printf("INT! Leyendo %u palabras (%u bytes)...\r\n", num_words_available, bytes_to_read);

    // --- Medir Tiempo ---
    start_time = TIM2->CNT;
    status = lsm6dsl_read_reg(&(MotionSensor.Ctx), LSM6DSL_FIFO_DATA_OUT_L, fifo_data_buffer, bytes_to_read);
    read_duration_ticks = TIM2->CNT - start_time; // <- difftime ahora es local
    // --- Fin Medición ---

    // Calcular tiempo en us (¡Asegúrate que SystemCoreClock está bien definido!)
    read_duration_us = read_duration_ticks / (SystemCoreClock / 1000000);
    printf("Tiempo lectura: %lu ticks (~%lu us)\r\n", read_duration_ticks, read_duration_us);

    if (status != LSM6DSL_OK) {
        printf("E:ReadFIFO(%uB,%ld)\r\n", bytes_to_read, status);
        // Resetear FIFO en caso de error
        lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_BYPASS_MODE); HAL_Delay(1);
        lsm6dsl_fifo_mode_set(&(MotionSensor.Ctx), LSM6DSL_STREAM_MODE);
        return;
    }

    // --- Procesar y mostrar (solo Z) ---
    uint16_t sets_leidos = num_words_available / ACCEL_WORDS_PER_SET;
    printf("--- Procesando %u sets (Solo Accel Z) ---\r\n", sets_leidos);
    for (uint16_t i = 0; i < sets_leidos; i++) {
         if (i < 5 || i >= (sets_leidos - 5)) { // Primeros y últimos 5
            uint8_t* pSetData = &fifo_data_buffer[i * ACCEL_BYTES_PER_SET];
            int16_t acc_raw_z = (int16_t)(((uint16_t)pSetData[5] << 8) | pSetData[4]);
            int32_t acc_mg_z = (int32_t)((float)acc_raw_z * cached_acc_sensitivity);
            printf(" Set[%3u]: Az = %5ld mg\r\n", i, acc_mg_z);
        }
    }
    printf("--- Fin Procesamiento ---\r\n");

    // NOTA: En modo Stream, no necesitamos resetear la FIFO explícitamente
    // después de leer, ya que sigue llenándose. La condición de interrupción
    // debería borrarse al leer suficientes datos para bajar del umbral,
    // o podríamos necesitar leer el registro fuente de la interrupción si está latcheada.
    // Por simplicidad ahora, no la reseteamos aquí y confiamos en que el nivel baje.
    // Si la interrupción sigue disparándose continuamente, podría ser necesario un reset
    // o leer el registro fuente INT1_SRC / FUNC_SRC1 si la interrupción es latched.
}


/**
  * @brief EXTI Line Detection Callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  // Asegúrate que el pin coincide con el conectado a INT1 del sensor
  if (GPIO_Pin == LSM6DSL_INT1_PIN) {
    fifo_int_triggered = 1; // Poner el flag para el bucle principal
    // NO hacer lecturas SPI/I2C aquí dentro de la interrupción.
  }
}


// --- En main() ---
int main(void)
{
  /* ... Init ... */
  printf("---- LSM6DSL FIFO Interrupt SPI (Accel Z @ 6.66kHz) ----\r\n");
  MEMS_Init_SPI_FIFO_Int(); // Llama a la nueva inicialización

  /* Infinite loop */
  while (1)
  {
    if (fifo_int_triggered)
    {
        fifo_int_triggered = 0; // Resetear flag PRIMERO
        Read_Full_FIFO_And_Measure_Time_SPI(); // Llamar a la función de lectura/proceso
    }

    // Bucle principal puede hacer otras tareas o un pequeño delay
    HAL_Delay(1); // Ceder algo de tiempo
  }
}

// ... Resto del código (_write, Error_Handler, etc) ...

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    printf("no se conectó");
    HAL_Delay(50); /* wait 50 ms */
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
